# Generated by Django 2.2.1 on 2019-05-20 08:55

from django.db import migrations
import django.db.models.deletion
import salesforce.backend.operations
import salesforce.fields


class Migration(migrations.Migration):

    dependencies = [
        ('web', '0002_auto_20190515_0931'),
    ]

    operations = [
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', salesforce.fields.SalesforceAutoField(auto_created=True, db_column='Id', primary_key=True, serialize=False, verbose_name='ID')),
                ('name', salesforce.fields.CharField(max_length=80, verbose_name='Calendar Name')),
                ('type', salesforce.fields.CharField(choices=[('User', 'User Calendar'), ('Public', 'Public Calendar'), ('Resource', 'Resource Calendar'), ('Holiday', 'Holiday Calendar')], max_length=40, verbose_name='Calendar Type')),
                ('is_active', salesforce.fields.BooleanField(default=False, verbose_name='Active')),
                ('created_date', salesforce.fields.DateTimeField()),
                ('last_modified_date', salesforce.fields.DateTimeField()),
                ('system_modstamp', salesforce.fields.DateTimeField()),
                ('created_by', salesforce.fields.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='calendar_createdby_set', to='web.User')),
                ('last_modified_by', salesforce.fields.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='calendar_lastmodifiedby_set', to='web.User')),
                ('user', salesforce.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calendar_user_set', to='web.User')),
            ],
            options={
                'verbose_name': 'Calendar',
                'verbose_name_plural': 'Calendars',
                'db_table': 'Calendar',
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', salesforce.fields.SalesforceAutoField(auto_created=True, db_column='Id', primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', salesforce.fields.CharField(blank=True, choices=[('Call', 'Call'), ('Email', 'Email'), ('Meeting', 'Meeting'), ('Send Letter/Quote', 'Send Letter/Quote'), ('Other', 'Other')], max_length=255, null=True)),
                ('location', salesforce.fields.CharField(blank=True, max_length=255, null=True)),
                ('is_all_day_event', salesforce.fields.BooleanField(default=salesforce.backend.operations.DefaultedOnCreate(), verbose_name='All-Day Event')),
                ('activity_date_time', salesforce.fields.DateTimeField(blank=True, null=True, verbose_name='Due Date Time')),
                ('activity_date', salesforce.fields.DateField(blank=True, null=True, verbose_name='Due Date Only')),
                ('duration_in_minutes', salesforce.fields.IntegerField(blank=True, null=True, verbose_name='Duration')),
                ('start_date_time', salesforce.fields.DateTimeField(blank=True, null=True)),
                ('end_date_time', salesforce.fields.DateTimeField(blank=True, null=True)),
                ('description', salesforce.fields.TextField(blank=True, null=True)),
                ('is_private', salesforce.fields.BooleanField(default=salesforce.backend.operations.DefaultedOnCreate(), verbose_name='Private')),
                ('show_as', salesforce.fields.CharField(blank=True, choices=[('Busy', 'Busy'), ('OutOfOffice', 'Out of Office'), ('Free', 'Free')], default=salesforce.backend.operations.DefaultedOnCreate(), max_length=40, null=True, verbose_name='Show Time As')),
                ('is_deleted', salesforce.fields.BooleanField(default=False, verbose_name='Deleted')),
                ('is_child', salesforce.fields.BooleanField(default=False)),
                ('is_group_event', salesforce.fields.BooleanField(default=False)),
                ('group_event_type', salesforce.fields.CharField(blank=True, choices=[('0', 'Non-group Event'), ('1', 'Group Event'), ('2', 'Proposed Event'), ('3', 'IsRecurrence2 Series Pattern')], default='0', max_length=40, null=True)),
                ('created_date', salesforce.fields.DateTimeField()),
                ('last_modified_date', salesforce.fields.DateTimeField()),
                ('system_modstamp', salesforce.fields.DateTimeField()),
                ('is_archived', salesforce.fields.BooleanField(default=False, verbose_name='Archived')),
                ('is_recurrence', salesforce.fields.BooleanField(default=salesforce.backend.operations.DefaultedOnCreate(), verbose_name='Create Recurring Series of Events')),
                ('recurrence_start_date_time', salesforce.fields.DateTimeField(blank=True, null=True, verbose_name='Recurrence Start')),
                ('recurrence_end_date_only', salesforce.fields.DateField(blank=True, null=True, verbose_name='Recurrence End')),
                ('recurrence_time_zone_sid_key', salesforce.fields.CharField(blank=True, choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Is. Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Is. Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Petropavlovsk-Kamchatski Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Is. Time (Pacific/Guadalcanal)'), ('Pacific/Norfolk', '(GMT+11:00) Norfolk Time (Pacific/Norfolk)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Queensland) (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (New South Wales) (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (South Australia) (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Northern Territory) (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korea Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippines Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) China Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) West Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Yekaterinburg', '(GMT+05:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Baku', '(GMT+04:00) Azerbaijan Time (Asia/Baku)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Africa/Nairobi', '(GMT+03:00) Eastern African Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabia Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabia Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabia Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Moscow Standard Time (Europe/Minsk)'), ('Europe/Moscow', '(GMT+03:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Greenwich Mean Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) Eastern Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Standard Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentine Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Caracas', '(GMT-04:00) Venezuela Time (America/Caracas)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Time (America/Santiago)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Standard Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Daylight Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], max_length=40, null=True, verbose_name='Recurrence Time Zone')),
                ('recurrence_type', salesforce.fields.CharField(blank=True, choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], max_length=40, null=True)),
                ('recurrence_interval', salesforce.fields.IntegerField(blank=True, null=True)),
                ('recurrence_day_of_week_mask', salesforce.fields.IntegerField(blank=True, null=True, verbose_name='Recurrence Day of Week Mask')),
                ('recurrence_day_of_month', salesforce.fields.IntegerField(blank=True, null=True, verbose_name='Recurrence Day of Month')),
                ('recurrence_instance', salesforce.fields.CharField(blank=True, choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], max_length=40, null=True)),
                ('recurrence_month_of_year', salesforce.fields.CharField(blank=True, choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], max_length=40, null=True, verbose_name='Recurrence Month of Year')),
                ('reminder_date_time', salesforce.fields.DateTimeField(blank=True, null=True, verbose_name='Reminder Date/Time')),
                ('is_reminder_set', salesforce.fields.BooleanField(default=salesforce.backend.operations.DefaultedOnCreate(), verbose_name='Reminder Set')),
                ('event_subtype', salesforce.fields.CharField(blank=True, choices=[('Event', 'Event')], max_length=40, null=True)),
                ('is_recurrence2_exclusion', salesforce.fields.BooleanField(default=False, verbose_name='Historical Event, Not Following Recurrence')),
                ('recurrence2_pattern_text', salesforce.fields.TextField(blank=True, null=True, verbose_name='Recurrence Pattern')),
                ('recurrence2_pattern_version', salesforce.fields.CharField(blank=True, choices=[('1', 'RFC 5545 v4 RRULE')], max_length=40, null=True, verbose_name='Pattern Version')),
                ('is_recurrence2', salesforce.fields.BooleanField(default=False, verbose_name='Repeat')),
                ('is_recurrence2_exception', salesforce.fields.BooleanField(default=False, verbose_name='Is Exception')),
                ('recurrence2_pattern_start_date', salesforce.fields.DateTimeField(blank=True, null=True, verbose_name='Recurrence Pattern Start Date')),
                ('recurrence2_pattern_time_zone', salesforce.fields.CharField(blank=True, max_length=255, null=True, verbose_name='Recurrence Pattern Time Zone Reference')),
                ('account', salesforce.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_account_set', to='web.Account')),
                ('created_by', salesforce.fields.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_createdby_set', to='web.User')),
                ('last_modified_by', salesforce.fields.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_lastmodifiedby_set', to='web.User')),
                ('owner', salesforce.fields.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='web.Calendar')),
                ('recurrence_activity', salesforce.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='web.Event')),
                ('what', salesforce.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event_what_set', to='web.Account')),
                ('who', salesforce.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='web.Contact')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'Event',
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
    ]
